#!/usr/bin/env node

var SORT_STRATEGY_BASE = '../lib/sort_strategies';

var args = require('minimist')(process.argv.slice(2));
var contributors = require('../lib/contributors');
var path = require('path');
var fs = require('fs');

// Layout strategy
args.layoutStrategy = args.layoutStrategy || '../lib/layout_strategies/table.js';

if (fs.existsSync(args.layoutStrategy)) {
  args.layoutStrategy = require(args.layoutStrategy);
} else {
  throw new Error('Invalid layout strategy "' + args.layoutStrategy + '".');
  process.exit(0);
}

// Sort strategy
if (!args.sortStrategy) {
  var strategyModule = 'sort_asc.js';
  if (args.sortOrder === 'desc') {
    strategyModule = 'sort_desc.js';
  }
  args.sortStrategy = path.join(SORT_STRATEGY_BASE, strategyModule);
}
if (fs.existsSync(args.sortStrategy)) {
  args.sortStrategy = require(args.sortStrategy);
} else {
  throw new Error('Invalid sort strategy "' + args.layout + '".');
  process.exit(0);
}

// Sort property
args.sortBy = args.sortBy || 'contributions';

// Filter
if (args.filter) {
  args.filter = args.filter.split(',').filter(function (u) {
    return u.length > 0;
  }).map(function (u) {
    return u.trim();
  });
} else {
  args.filter = [];
}

args.filterStrategy = args.filterStrategy || '../lib/filter_strategies/login.js';
// Fiter strategy
if (fs.existsSync(args.filterStrategy)) {
  args.filterStrategy = require(args.filterStrategy);
} else {
  throw new Error('Invalid filter strategy "' + args.filterStrategy + '".');
  process.exit(0);
}

contributors = contributors(args);

contributors.get()
.then(function (obj) {
  console.log(obj);
});

