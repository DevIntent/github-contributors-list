#!/usr/bin/env node
var STRATEGY_BASE = '../lib/strategies/';

var args = require('minimist')(process.argv.slice(2));
var contributors = require('../lib/contributors');
var path = require('path');
var fs = require('fs');

var logResults = function (obj) { console.log(obj); };
var logErrors = function (obj) { console.error(obj); };

// Test call to get contributor list and dump to console

contributors( validateArgs(args) )
  .loadAll( args.owner,  args.repository, args.authToken, args.fromDate )
  .then( logResults,logErrors );


// ************************************
// Internal methods
// ************************************

function validateArgs(args) {
  init_layout(args);
  init_sorting(args);
  init_filtering(args);

  // Validate required arguments
  args.owner = args.owner || args.user;
  args.repository = args.repository || args.repos;
  if (!args.repository || !args.owner) throw new Error("both arguments '--repo' and '--user' are required! ");

  return args
}

function init_layout(args) {
  // Layout strategy
  args.layoutStrategy = args.layoutStrategy || path.join(STRATEGY_BASE, 'layout_strategies/table.js');
  if (fs.existsSync(args.layoutStrategy)) {
    args.layoutStrategy = require(args.layoutStrategy);
  } else {
    throw new Error('Invalid layout strategy "' + args.layoutStrategy + '".');
    process.exit(0);
  }
}

function init_sorting(args) {
  // Sort property
  args.sortBy = args.sortBy || 'contributions';

  // Sort strategy
  if (!args.sortStrategy) {
    var strategyModule = 'sort_asc.js';
    if (args.sortOrder === 'desc') {
      strategyModule = 'sort_desc.js';
    }
    args.sortStrategy = path.join(STRATEGY_BASE, 'sort_strategies/', strategyModule);
  }
  if (fs.existsSync(args.sortStrategy)) {
    args.sortStrategy = require(args.sortStrategy);
  } else {
    throw new Error('Invalid sort strategy "' + args.layout + '".');
    process.exit(0);
  }
}

function init_filtering(args) {
  // Filter
  if (args.filter) {
    args.filter = args.filter.split(',').filter(function (u) {
      return u.length > 0;
    }).map(function (u) {
      return u.trim();
    });
  } else {
    args.filter = [];
  }

  args.filterStrategy = args.filterStrategy || path.join(STRATEGY_BASE, 'filter_strategies/login.js');
  // Filter strategy
  if (fs.existsSync(args.filterStrategy)) {
    args.filterStrategy = require(args.filterStrategy);
  } else {
    throw new Error('Invalid filter strategy "' + args.filterStrategy + '".');
    process.exit(0);
  }
}

